// Generated by CoffeeScript 1.7.1
var a, b, b_index, file_data, filename, fs, index, levenshtein, metaphone, metaphone_a, metaphone_b, metaphone_distance, natural, sintagm, w, words, words_distance, words_unique, _i, _j, _k, _l, _len, _len1, _len2, _ref;

fs = require('fs');

levenshtein = require('levenshtein');

natural = require('natural');

metaphone = natural.Metaphone;

filename = process.argv[2];

file_data = fs.readFileSync(filename, {
  encoding: 'utf-8'
});

words = file_data.split("\n");

words = words.map(function(w) {
  return w.trim().toLowerCase();
});

words_unique = [];

for (_i = 0, _len = words.length; _i < _len; _i++) {
  w = words[_i];
  if (words_unique.indexOf(w) < 0) {
    words_unique.push(w);
  }
}

words = words_unique;

fs.writeFile(filename, words.join("\n"));

words_distance = [];

for (index = _j = 0, _len1 = words.length; _j < _len1; index = ++_j) {
  a = words[index];
  console.log("" + index);
  for (b_index = _k = index, _ref = words.length - 1; index <= _ref ? _k <= _ref : _k >= _ref; b_index = index <= _ref ? ++_k : --_k) {
    b = words[b_index];
    if (a === b) {
      continue;
    }
    metaphone_a = metaphone.process(a);
    metaphone_b = metaphone.process(b);
    metaphone_distance = new levenshtein(metaphone_a, metaphone_b);
    words_distance.push({
      "distance": metaphone_distance.distance,
      "a": a,
      "b": b,
      "metaphone_a": metaphone_a,
      "metaphone_b": metaphone_b
    });
  }
}

words_distance.sort(function(a, b) {
  if (a.distance > b.distance) {
    return -1;
  }
  if (a.distance < b.distance) {
    return 1;
  }
  if (a.distance === b.distance) {
    return 0;
  }
});

for (_l = 0, _len2 = words_distance.length; _l < _len2; _l++) {
  sintagm = words_distance[_l];
  console.log("" + sintagm.distance + " " + sintagm.a + " " + sintagm.b);
}
